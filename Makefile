# Black magic to get module directories
modules := $(foreach initpy, $(foreach dir, $(wildcard lib/*), $(wildcard $(dir)/__init__.py)), $(realpath $(dir $(initpy))))

PY_VERSION := $(shell python -c 'import platform; print(platform.python_version())')
ANACONDA_VERSION := $(shell ./scripts/anaconda_version.sh only)
ifdef ANACONDA_VERSION
PY_VERSION := $(ANACONDA_VERSION)
else
PY_VERSION := python-$(PY_VERSION)
endif

help:
	@echo "Streamlit Make Commands:"
	@echo " all          - Cleans and rebuilds lib and frontend."
	@echo " all-devel    - Rebuilds lib, and syncs pipenv and node_modules. "
	@echo " init         - Run once to install python and js dependencies."
	@echo " build        - build the static version of Streamlit (without Node)"
	@echo " pipenv-lock  - Re-generates Pipfile.lock. This should be run when you update the Pipfile."
	@echo " protobuf     - Recompile Protobufs for Python and Javascript."
	@echo " develop      - Install streamlit pointing to local workspace."
	@echo " install      - Install streamlit pointing to PYTHONPATH."
	@echo " wheel        - Create a wheel file in dist/."
	@echo " loc          - Count lines of code."
	@echo " clean-docs   - Deletes the autogenerated HTML documentation."
	@echo " docs         - Generates HTML documentation at /docs/_build."
	@echo " devel-docs   - Builds docs and starts a local server."
	@echo " publish-docs - Builds docs and pushes the documentation to prod."
	@echo " pytest       - Runs python unit tests."
	@echo " jslint       - Lints the frontend."
	@echo " e2etest      - Run E2E tests"

.PHONY: all
all: clean init install build develop

.PHONY: all-devel
all-devel: init install develop
	@echo ""
	@echo "    The frontend has *not* been rebuilt, so shared reports won't work."
	@echo "    If you need to test report sharing, run 'make build' first!"
	@echo ""

.PHONY: init
init: setup pipenv-install react-init scssvars protobuf # react-build release

.PHONY: build
build: react-build

setup:
	pip install pip-tools pipenv

pipenv-install: lib/Pipfile
	@# Runs pipenv install; doesn't update the Pipfile.lock.
	cd lib; pipenv install --dev

pipenv-lock: lib/Pipfile
	@# Regenerates Pipfile.lock and rebuilds the virtualenv. This is rather slow.
# In CircleCI, dont generate Pipfile.lock This is only used for development.
ifndef CIRCLECI
	cd lib; rm -f Pipfile.lock; pipenv lock --dev && mv Pipfile.lock Pipfile.locks/$(PY_VERSION)
else
	echo "Running in CircleCI, not generating requirements."
endif
	cd lib; rm -f Pipfile.lock; cp -f Pipfile.locks/$(PY_VERSION) Pipfile.lock
ifndef CIRCLECI
	# Dont update lockfile and install whatever is in lock.
	cd lib; pipenv install --ignore-pipfile --dev
else
	cd lib; pipenv install --ignore-pipfile --dev --system
endif

pylint:
	# Linting
	# (Ignore E402 since our Python2-compatibility imports break this lint rule.)
	cd lib; flake8 --ignore=E402,E128 --exclude=streamlit/protobuf/*_pb2.py $(modules) tests/

pytest:
	# Just testing. No code coverage.
	cd lib; PYTHONPATH=. pytest -v -l tests/ $(modules)

pycoverage:
	# testing + code coverage
	cd lib; PYTHONPATH=. pytest -v -l $(foreach dir,$(modules),--cov=$(dir)) --cov-report=term-missing tests/ $(modules)

.PHONY: user-tests
user-tests:
	flake8 --ignore=E402,E128 user-tests/
	pytest -v -l user-tests/

install:
	cd lib ; python setup.py install

develop:
	cd lib ; python setup.py develop

# dev:
# 	python setup.py egg_info --tag-build=.$(USER) bdist_wheel sdist
# 	@echo
# 	@echo Dev wheel file in $(shell ls dist/*$(shell python setup.py --version).$(USER)-py27*whl) and install with '"pip install [wheel file]"'
# 	@echo

wheel:
	# Get rid of the old build folder to make sure that we delete old js and css.
	rm -rfv lib/build
	cd lib ; python setup.py bdist_wheel --universal
	# cd lib ; python setup.py bdist_wheel sdist

clean:
	@echo FIXME: This needs to be fixed!
	cd lib; rm -rf build dist  .eggs *.egg-info
	find . -name '*.pyc' -type f -delete || true
	find . -name __pycache__ -type d -delete || true
	find . -name .pytest_cache -exec rm -rfv {} \; || true
	cd frontend; rm -rf build node_modules
	rm -f lib/streamlit/protobuf/*_pb2.py
	rm -rf frontend/public/vendor
	rm -f frontend/src/autogen/protobuf.js
	rm -f frontend/src/autogen/protobuf.d.ts
	rm -f frontend/src/autogen/scssVariables.ts
	rm -rf lib/streamlit/static
	rm -f lib/Pipfile.lock
	find . -name .streamlit -type d -exec rm -rfv {} \; || true
	cd lib; rm -rf .coverage .coverage\.*
	rm -rf conda/streamlit-forge

.PHONY: clean-docs
clean-docs:
	cd docs; \
		make distclean

.PHONY: docs
docs: clean-docs
	cd docs; \
		make html

.PHONY: devel-docs
devel-docs: docs
	cd docs/_build/html; \
		python -m SimpleHTTPServer 8000 || python -m http.server 8000

.PHONY: publish-docs
publish-docs: docs
	cd docs/_build; \
		aws s3 sync \
				--acl public-read html s3://streamlit.io/secret/docs/ \
				--profile streamlit
	#
	# The line below uses the distribution ID obtained with
	# $ aws cloudfront list-distributions | \
	#     jq '.DistributionList.Items[] | \
	#     select(.Aliases.Items[0] | \
	#     contains("www.streamlit.io")) | \
	#     .Id'
	#
		aws cloudfront create-invalidation \
			--distribution-id=E5G9JPT7IOJDV \
			--paths \
				'/secret/docs/*' \
				'/secret/docs/api/*' \
				'/secret/docs/tutorial/*' \
			--profile streamlit

.PHONY: protobuf
protobuf:
	@# Python protobuf generation
	protoc \
		--proto_path=protobuf protobuf/*.proto \
		--python_out=lib/streamlit/protobuf

	@# Create a folder for autogenerated files
	mkdir -p frontend/src/autogen

	@# JS protobuf generation. The --es6 flag generates a proper es6 module.
	cd frontend/ ; ( \
		echo "/* eslint-disable */" ; \
		echo ; \
		./node_modules/protobufjs/bin/pbjs ../protobuf/*.proto -t static-module --es6 \
	) > ./src/autogen/protobuf.js

	@# Typescript type declarations for our generated protobufs
	cd frontend/ ; ( \
		echo "/* eslint-disable */" ; \
		echo ; \
		./node_modules/protobufjs/bin/pbts ./src/autogen/protobuf.js \
	) > ./src/autogen/protobuf.d.ts

.PHONY: react-init
react-init:
	cd frontend/ ; yarn install

.PHONY: react-build
react-build:
	cd frontend/ ; yarn run build
	rsync -av --delete --delete-excluded --exclude=reports \
		frontend/build/ lib/streamlit/static/
	find lib/streamlit/static -type 'f' -iname '*.map' | xargs rm -fv

.PHONY: scssvars
scssvars: react-init
	@# Generate scssVariables.ts
	mkdir -p frontend/src/autogen
	cd frontend ; ( \
		echo "export const SCSS_VARS = " ; \
		yarn run --silent scss-to-json src/assets/css/variables.scss \
	) > src/autogen/scssVariables.ts

.PHONY: jslint
jslint:
	@# max-warnings 0 means we'll exit with a non-zero status on any lint warning
	cd frontend; ./node_modules/.bin/eslint --ext .js --ext .jsx --ext .ts --ext .tsx --ignore-pattern 'src/autogen/*' --max-warnings 0 ./src

js-test:
	cd frontend; yarn run test
	cd frontend; yarn run coverage

# Counts the number of lines of code in the project
loc:
	find . -iname '*.py' -or -iname '*.js'  | \
		egrep -v "(node_modules)|(_pb2)|(lib\/protobuf)|(dist\/)" | \
		xargs wc

# Distributes the package to PyPi
distribute:
	cd lib/dist; \
		twine upload $$(ls -t *.whl | head -n 1)

.PHONY: docker-build-frontend
docker-build-frontend:
	cd docker/streamlit ; docker-compose build frontend

.PHONY: create-conda-packages serve-conda
create-conda-packages:
	cd conda ; ./create_packages.sh

.PHONY: serve-conda
serve-conda:
	cd conda ; python -m http.server 8000 || python -m SimpleHTTPServer 8000

# Run E2E tests
.PHONY: e2etest
e2etest:
	./scripts/e2e.sh
