# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
workflows:
  version: 2
  circleci:
    jobs:
      - python-2.7.16:
          requires:
            - python-3.7.3
      - python-3.7.3

jobs:
  python-3.7.3: &job-template
    docker:
      - image: circleci/python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout:
          name: Checkout Streamlit code

      #################################################################
      # Pre Cache Steps
      #################################################################
      - run:
          name: set environment variables if in conda.
          command: |
            if conda info; then
              echo "Conda found, setting variables."
              ./scripts/anaconda_version.sh >> $BASH_ENV
              echo 'export SUDO=""' >> $BASH_ENV
              touch make.bin
              md5sum make.bin > ~/make.md5
              rm -f make.bin
            else
              echo 'export SUDO="sudo"' >> $BASH_ENV
              cp -f /usr/bin/make make.bin
              md5sum make.bin > ~/make.md5
            fi

      - run:
          name: install graphviz ie dot
          command: |
            echo 'export SUDO="sudo"' >> $BASH_ENV
            if [ -f /usr/bin/dot ] ; then
              cp -f /usr/bin/dot dot.bin
              md5sum dot.bin > ~/dot.md5
            else
              touch dot.bin
              md5sum dot.bin > ~/dot.md5
              rm -f dot.bin
            fi

      - run:
          # We use the python Pipfile.lock as the cache key and also
          # the hash of the current python.
          # If dependencies haven't changed then use the cache.
          name: Create python cache key.
          command: |
            md5sum lib/Pipfile.locks/${CIRCLE_JOB} > ~/python_version.md5
            md5sum $(which python) >> ~/python_version.md5

      - run:
          name: Create node_modules cache key.
          command: |
            md5sum frontend/yarn.lock > ~/yarn.lock.md5
            md5sum $(which python) >> ~/yarn.lock.md5

      - run:
          # There is no lock file for the protobufs so we run a checksum
          # across all the protos and save that to a file to use as
          # cache key.
          name: Create checksum for all protobufs
          command: |
            md5sum protobuf/*.proto $(which python) > ~/protobuf.md5

      #################################################################
      # Restore from cache
      #################################################################
      - restore_cache:
          name: Restore /opt/conda from cache
          keys:
          - v12-opt-conda-{{ checksum "~/python_version.md5" }}

      - restore_cache:
          name: Restore virtualenv from cache
          keys:
          - v12-python-venv-{{ checksum "~/python_version.md5" }}

      - restore_cache:
          name: Restore nvm and node_modules from cache
          keys:
          - v12-nvm_node_modules-{{ checksum "~/yarn.lock.md5" }}

      - restore_cache:
          name: Restore protobufs from cache
          keys:
          - v12-protobuf-{{ checksum "~/protobuf.md5" }}

      - restore_cache:
          name: Restore make from cache
          keys:
          - v12_make.bin-{{ checksum "~/make.md5" }}

      - restore_cache:
          name: Restore dot from cache
          keys:
          - v12_dot.bin-{{ checksum "~/dot.md5" }}

      #################################################################
      # Pre Make commands
      #################################################################
      - run:
          name: install make
          command: |
            if [ -s make.bin ] ; then
              echo "make.bin does exists and is non zero"
            else
              echo "/usr/bin/make doesnt exist, installing"
              apt-get update -y
              apt-get install -y make
              cp -f /usr/bin/make make.bin
            fi
            ${SUDO} cp -f make.bin /usr/bin/make

      - save_cache:
          name: Save make to cache
          key: v12_make.bin-{{ checksum "~/make.md5" }}
          paths:
            - make.bin

      - run:
          name: install dot
          command: |
            if [ -s dot.bin ] ; then
              echo "dot.bin does exists and is non zero"
            else
              echo "/usr/bin/dot doesnt exist, installing"
              ${SUDO} apt-get update -y
              ${SUDO} apt-get install -y graphviz
              cp -f /usr/bin/dot dot.bin
            fi
            ${SUDO} cp -f dot.bin /usr/bin/dot

      - save_cache:
          name: Save dot to cache
          key: v12_dot.bin-{{ checksum "~/dot.md5" }}
          paths:
            - dot.bin


      #################################################################
      # Run 'make init'
      #################################################################
      - run:
          name: Install NVM ie nodejs
          command: |
            if [ ! -d ~/.nvm ] ; then
              # install nodejs via nvm
              curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
              source "$HOME/.nvm/nvm.sh"
              nvm install --lts=dubnium
              # install yarn
              npm install -g yarn
            fi
            if [ ! -d frontend/node_modules ] ; then
              source "$HOME/.nvm/nvm.sh"
              make react-init
            fi
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo 'source "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run:
          name: Run make pipenv-lock and create virtualenv if necessary.
          command: |
            if echo ${CIRCLE_JOB} | egrep -qi conda ; then
              echo 'In conda, not creating virtualenv'
              if pip freeze | grep -qi pipenv ; then
                echo 'skipping make setup and make pipenv-lock'
              else
                # pip install psutil requires gcc.
                apt-get update -y
                apt-get install -y build-essential
                make setup
                make pipenv-lock
              fi
              mkdir -p venv
            else
              echo 'Not in conda, checking for virtualenv'
              if [ ! -d venv ] ; then
                if [ "${CIRCLE_JOB}" == "python-2.7.16" ] ; then
                  pip install virtualenv
                  python -m virtualenv venv
                else
                  python -m venv venv
                fi
                source venv/bin/activate
                make setup
                make pipenv-lock
                deactivate
              else
                echo 'Virtualenv already exists, not creating'
              fi
              echo 'source venv/bin/activate' >> $BASH_ENV
            fi

      - run:
          name: Run make develop
          command: |
            make develop

      - run:
          name: Generate protobufs
          command: |
            # There's a chance this file could be a cached version when
            # the protobuf cache is restored, so checkout from github to
            # make sure.
            git checkout -- lib/streamlit/protobuf/__init__.py
            if [ ! -e frontend/src/autogen/protobuf.js -o ! -e lib/streamlit/protobuf/DataFrame_pb2.py ] ; then
              # install protobuf v3
              ${SUDO} apt-get update -y
              ${SUDO} apt-get install -y gnupg
              echo "deb http://ppa.launchpad.net/maarten-fonville/protobuf/ubuntu trusty main" | ${SUDO} tee /etc/apt/sources.list.d/protobuf.list
              ${SUDO} apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4DEA8909DC6A13A3
              ${SUDO} apt-get update -y
              ${SUDO} apt-get install -y protobuf-compiler
              make protobuf
            fi

      #################################################################
      # Run linters
      #################################################################
      - run:
          name: Run linters.
          command: |
            make jslint

      #################################################################
      # Run make pycoverage
      #################################################################
      - run:
          name: Run python tests.
          command: |
            make pycoverage

      #################################################################
      # Save cache for python virtualenv, node_modules, protobuf
      #################################################################
      - save_cache:
          name: Save /opt/conda to cache
          key: v12-opt-conda-{{ checksum "~/python_version.md5" }}
          paths:
            - /opt/conda

      - save_cache:
          name: Save virtualenv to cache
          key: v12-python-venv-{{ checksum "~/python_version.md5" }}
          paths:
            - venv

      - save_cache:
          name: Save nvm and node_modules to cache
          key: v12-nvm_node_modules-{{ checksum "~/yarn.lock.md5" }}
          paths:
            - frontend/node_modules
            - ~/.nvm

      - save_cache:
          name: Save generated protobufs to cache
          key: v12-protobuf-{{ checksum "~/protobuf.md5" }}
          paths:
            - frontend/src/autogen/protobuf.js
            - lib/streamlit/protobuf

  python-2.7.16:
    <<: *job-template
    docker:
      - image: circleci/python:2.7.16-stretch
